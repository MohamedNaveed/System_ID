function [Z, UU, K] = apply_control_ARMA(Y_bar, sysd, q, u)

nu = size(sysd.B,2); % number of control inputs
nz = size(sysd.C,1); % number of outputs

[alpha, beta] = Y_bar2alpha_beta(Y_bar, nu, nz, q); 

% POD2C realization
 
%building AA eq. 22
AA = zeros(q*nz + (q-1)*nu, q*nz + (q-1)*nu);

AA(1:nz,:) = [alpha, beta(:, nu+1:end)]; 

AA(nz + 1: q*nz,1:(q-1)*nz) = eye((q-1)*nz);

AA (q*nz + nu + 1:end, q*nz + 1:q*nz + (q-2)*nu) = eye((q-2)*nu);

%building BB eq. 22

BB = zeros(q*nz + (q-1)*nu,nu);

BB(1:nz,:) = beta(:,1:nu);

BB(q*nz + 1:q*nz + nu) = eye(nu);

CC = eye(q*nz + (q-1)*nu);
DD = zeros(q*nz + (q-1)*nu , nu);

% design lqr
Q = 10*eye(q*nz + (q-1)*nu);
R = eye(nu);

[K, S, e] = dlqr(AA, BB, Q, R);



% choose initial condition
t = 100;
Z0 = zeros(q*nz + (q-1)*nu,1);

for i=1:q
    
    Z0((i-1)*nz + 1: i*nz) = y(:,t-i);
end

for i=1:q-1
    
    Z0(q*nz + (i-1)*nu + 1:q*nz + i*nu) = u_vec(:,t-i-1);
end

% apply control

control_t_steps = 100;

Z = zeros(q*nz + (q-1)*nu, control_t_steps+1);
Z(:,1) = Z0;

UU = zeros(nu, control_t_steps);

for i = 1:control_t_steps
    
    UU(:,i) = -K*Z(:,i);
    Z(:,i+1) = AA*Z(:,i) + BB*UU(:,i); 
    
end

end

